// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_addressbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_addressbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_addressbook_2eproto;
namespace ccg_pb {
class PlayerData;
class PlayerDataDefaultTypeInternal;
extern PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
class call;
class callDefaultTypeInternal;
extern callDefaultTypeInternal _call_default_instance_;
class call_Respone;
class call_ResponeDefaultTypeInternal;
extern call_ResponeDefaultTypeInternal _call_Respone_default_instance_;
class call_begin_Respone;
class call_begin_ResponeDefaultTypeInternal;
extern call_begin_ResponeDefaultTypeInternal _call_begin_Respone_default_instance_;
class chatemo;
class chatemoDefaultTypeInternal;
extern chatemoDefaultTypeInternal _chatemo_default_instance_;
class chatemo_Respone;
class chatemo_ResponeDefaultTypeInternal;
extern chatemo_ResponeDefaultTypeInternal _chatemo_Respone_default_instance_;
class chatstring;
class chatstringDefaultTypeInternal;
extern chatstringDefaultTypeInternal _chatstring_default_instance_;
class chatstring_Respone;
class chatstring_ResponeDefaultTypeInternal;
extern chatstring_ResponeDefaultTypeInternal _chatstring_Respone_default_instance_;
class chattext;
class chattextDefaultTypeInternal;
extern chattextDefaultTypeInternal _chattext_default_instance_;
class chattext_Respone;
class chattext_ResponeDefaultTypeInternal;
extern chattext_ResponeDefaultTypeInternal _chattext_Respone_default_instance_;
class gameend_Respone;
class gameend_ResponeDefaultTypeInternal;
extern gameend_ResponeDefaultTypeInternal _gameend_Respone_default_instance_;
class login_DeviceReq;
class login_DeviceReqDefaultTypeInternal;
extern login_DeviceReqDefaultTypeInternal _login_DeviceReq_default_instance_;
class login_Respone;
class login_ResponeDefaultTypeInternal;
extern login_ResponeDefaultTypeInternal _login_Respone_default_instance_;
class login_namepasswordReq;
class login_namepasswordReqDefaultTypeInternal;
extern login_namepasswordReqDefaultTypeInternal _login_namepasswordReq_default_instance_;
class login_wechatReq;
class login_wechatReqDefaultTypeInternal;
extern login_wechatReqDefaultTypeInternal _login_wechatReq_default_instance_;
class poker;
class pokerDefaultTypeInternal;
extern pokerDefaultTypeInternal _poker_default_instance_;
class pokerout;
class pokeroutDefaultTypeInternal;
extern pokeroutDefaultTypeInternal _pokerout_default_instance_;
class pokerout_Respone;
class pokerout_ResponeDefaultTypeInternal;
extern pokerout_ResponeDefaultTypeInternal _pokerout_Respone_default_instance_;
class room_createReq;
class room_createReqDefaultTypeInternal;
extern room_createReqDefaultTypeInternal _room_createReq_default_instance_;
class room_createRespone;
class room_createResponeDefaultTypeInternal;
extern room_createResponeDefaultTypeInternal _room_createRespone_default_instance_;
class room_gamestartRespone;
class room_gamestartResponeDefaultTypeInternal;
extern room_gamestartResponeDefaultTypeInternal _room_gamestartRespone_default_instance_;
class room_joinReq;
class room_joinReqDefaultTypeInternal;
extern room_joinReqDefaultTypeInternal _room_joinReq_default_instance_;
class room_joinRespone;
class room_joinResponeDefaultTypeInternal;
extern room_joinResponeDefaultTypeInternal _room_joinRespone_default_instance_;
class room_playerReady;
class room_playerReadyDefaultTypeInternal;
extern room_playerReadyDefaultTypeInternal _room_playerReady_default_instance_;
class room_playerReadyRespone;
class room_playerReadyResponeDefaultTypeInternal;
extern room_playerReadyResponeDefaultTypeInternal _room_playerReadyRespone_default_instance_;
}  // namespace ccg_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::ccg_pb::PlayerData* Arena::CreateMaybeMessage<::ccg_pb::PlayerData>(Arena*);
template<> ::ccg_pb::call* Arena::CreateMaybeMessage<::ccg_pb::call>(Arena*);
template<> ::ccg_pb::call_Respone* Arena::CreateMaybeMessage<::ccg_pb::call_Respone>(Arena*);
template<> ::ccg_pb::call_begin_Respone* Arena::CreateMaybeMessage<::ccg_pb::call_begin_Respone>(Arena*);
template<> ::ccg_pb::chatemo* Arena::CreateMaybeMessage<::ccg_pb::chatemo>(Arena*);
template<> ::ccg_pb::chatemo_Respone* Arena::CreateMaybeMessage<::ccg_pb::chatemo_Respone>(Arena*);
template<> ::ccg_pb::chatstring* Arena::CreateMaybeMessage<::ccg_pb::chatstring>(Arena*);
template<> ::ccg_pb::chatstring_Respone* Arena::CreateMaybeMessage<::ccg_pb::chatstring_Respone>(Arena*);
template<> ::ccg_pb::chattext* Arena::CreateMaybeMessage<::ccg_pb::chattext>(Arena*);
template<> ::ccg_pb::chattext_Respone* Arena::CreateMaybeMessage<::ccg_pb::chattext_Respone>(Arena*);
template<> ::ccg_pb::gameend_Respone* Arena::CreateMaybeMessage<::ccg_pb::gameend_Respone>(Arena*);
template<> ::ccg_pb::login_DeviceReq* Arena::CreateMaybeMessage<::ccg_pb::login_DeviceReq>(Arena*);
template<> ::ccg_pb::login_Respone* Arena::CreateMaybeMessage<::ccg_pb::login_Respone>(Arena*);
template<> ::ccg_pb::login_namepasswordReq* Arena::CreateMaybeMessage<::ccg_pb::login_namepasswordReq>(Arena*);
template<> ::ccg_pb::login_wechatReq* Arena::CreateMaybeMessage<::ccg_pb::login_wechatReq>(Arena*);
template<> ::ccg_pb::poker* Arena::CreateMaybeMessage<::ccg_pb::poker>(Arena*);
template<> ::ccg_pb::pokerout* Arena::CreateMaybeMessage<::ccg_pb::pokerout>(Arena*);
template<> ::ccg_pb::pokerout_Respone* Arena::CreateMaybeMessage<::ccg_pb::pokerout_Respone>(Arena*);
template<> ::ccg_pb::room_createReq* Arena::CreateMaybeMessage<::ccg_pb::room_createReq>(Arena*);
template<> ::ccg_pb::room_createRespone* Arena::CreateMaybeMessage<::ccg_pb::room_createRespone>(Arena*);
template<> ::ccg_pb::room_gamestartRespone* Arena::CreateMaybeMessage<::ccg_pb::room_gamestartRespone>(Arena*);
template<> ::ccg_pb::room_joinReq* Arena::CreateMaybeMessage<::ccg_pb::room_joinReq>(Arena*);
template<> ::ccg_pb::room_joinRespone* Arena::CreateMaybeMessage<::ccg_pb::room_joinRespone>(Arena*);
template<> ::ccg_pb::room_playerReady* Arena::CreateMaybeMessage<::ccg_pb::room_playerReady>(Arena*);
template<> ::ccg_pb::room_playerReadyRespone* Arena::CreateMaybeMessage<::ccg_pb::room_playerReadyRespone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ccg_pb {

// ===================================================================

class PlayerData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.PlayerData) */ {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);
  PlayerData(PlayerData&& from) noexcept
    : PlayerData() {
    *this = ::std::move(from);
  }

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerData& operator=(PlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerData* internal_default_instance() {
    return reinterpret_cast<const PlayerData*>(
               &_PlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerData& a, PlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerData* New() const final {
    return CreateMaybeMessage<PlayerData>(nullptr);
  }

  PlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.PlayerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kHeadurlFieldNumber = 3,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 4,
  };
  // required string nick = 2;
  bool has_nick() const;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);

  // required string headurl = 3;
  bool has_headurl() const;
  void clear_headurl();
  const std::string& headurl() const;
  void set_headurl(const std::string& value);
  void set_headurl(std::string&& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  std::string* mutable_headurl();
  std::string* release_headurl();
  void set_allocated_headurl(std::string* headurl);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 status = 4;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.PlayerData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class login_namepasswordReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.login_namepasswordReq) */ {
 public:
  login_namepasswordReq();
  virtual ~login_namepasswordReq();

  login_namepasswordReq(const login_namepasswordReq& from);
  login_namepasswordReq(login_namepasswordReq&& from) noexcept
    : login_namepasswordReq() {
    *this = ::std::move(from);
  }

  inline login_namepasswordReq& operator=(const login_namepasswordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_namepasswordReq& operator=(login_namepasswordReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_namepasswordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_namepasswordReq* internal_default_instance() {
    return reinterpret_cast<const login_namepasswordReq*>(
               &_login_namepasswordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_namepasswordReq& a, login_namepasswordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(login_namepasswordReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_namepasswordReq* New() const final {
    return CreateMaybeMessage<login_namepasswordReq>(nullptr);
  }

  login_namepasswordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_namepasswordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_namepasswordReq& from);
  void MergeFrom(const login_namepasswordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_namepasswordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.login_namepasswordReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kDeviceTypeFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // required int32 DeviceType = 3;
  bool has_devicetype() const;
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.login_namepasswordReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class login_DeviceReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.login_DeviceReq) */ {
 public:
  login_DeviceReq();
  virtual ~login_DeviceReq();

  login_DeviceReq(const login_DeviceReq& from);
  login_DeviceReq(login_DeviceReq&& from) noexcept
    : login_DeviceReq() {
    *this = ::std::move(from);
  }

  inline login_DeviceReq& operator=(const login_DeviceReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_DeviceReq& operator=(login_DeviceReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_DeviceReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_DeviceReq* internal_default_instance() {
    return reinterpret_cast<const login_DeviceReq*>(
               &_login_DeviceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(login_DeviceReq& a, login_DeviceReq& b) {
    a.Swap(&b);
  }
  inline void Swap(login_DeviceReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_DeviceReq* New() const final {
    return CreateMaybeMessage<login_DeviceReq>(nullptr);
  }

  login_DeviceReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_DeviceReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_DeviceReq& from);
  void MergeFrom(const login_DeviceReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_DeviceReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.login_DeviceReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUdidFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
  };
  // required string udid = 1;
  bool has_udid() const;
  void clear_udid();
  const std::string& udid() const;
  void set_udid(const std::string& value);
  void set_udid(std::string&& value);
  void set_udid(const char* value);
  void set_udid(const char* value, size_t size);
  std::string* mutable_udid();
  std::string* release_udid();
  void set_allocated_udid(std::string* udid);

  // required int32 DeviceType = 2;
  bool has_devicetype() const;
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.login_DeviceReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udid_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class login_wechatReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.login_wechatReq) */ {
 public:
  login_wechatReq();
  virtual ~login_wechatReq();

  login_wechatReq(const login_wechatReq& from);
  login_wechatReq(login_wechatReq&& from) noexcept
    : login_wechatReq() {
    *this = ::std::move(from);
  }

  inline login_wechatReq& operator=(const login_wechatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_wechatReq& operator=(login_wechatReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_wechatReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_wechatReq* internal_default_instance() {
    return reinterpret_cast<const login_wechatReq*>(
               &_login_wechatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(login_wechatReq& a, login_wechatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(login_wechatReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_wechatReq* New() const final {
    return CreateMaybeMessage<login_wechatReq>(nullptr);
  }

  login_wechatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_wechatReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_wechatReq& from);
  void MergeFrom(const login_wechatReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_wechatReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.login_wechatReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUdidFieldNumber = 1,
    kHeadurlFieldNumber = 3,
    kDeviceTypeFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // required string udid = 1;
  bool has_udid() const;
  void clear_udid();
  const std::string& udid() const;
  void set_udid(const std::string& value);
  void set_udid(std::string&& value);
  void set_udid(const char* value);
  void set_udid(const char* value, size_t size);
  std::string* mutable_udid();
  std::string* release_udid();
  void set_allocated_udid(std::string* udid);

  // required string headurl = 3;
  bool has_headurl() const;
  void clear_headurl();
  const std::string& headurl() const;
  void set_headurl(const std::string& value);
  void set_headurl(std::string&& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  std::string* mutable_headurl();
  std::string* release_headurl();
  void set_allocated_headurl(std::string* headurl);

  // required int32 DeviceType = 2;
  bool has_devicetype() const;
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 type = 4;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.login_wechatReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class login_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.login_Respone) */ {
 public:
  login_Respone();
  virtual ~login_Respone();

  login_Respone(const login_Respone& from);
  login_Respone(login_Respone&& from) noexcept
    : login_Respone() {
    *this = ::std::move(from);
  }

  inline login_Respone& operator=(const login_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_Respone& operator=(login_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_Respone* internal_default_instance() {
    return reinterpret_cast<const login_Respone*>(
               &_login_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(login_Respone& a, login_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(login_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_Respone* New() const final {
    return CreateMaybeMessage<login_Respone>(nullptr);
  }

  login_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_Respone& from);
  void MergeFrom(const login_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.login_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 2,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 3,
  };
  // required string nick = 2;
  bool has_nick() const;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 id = 3;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.login_Respone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class room_createReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.room_createReq) */ {
 public:
  room_createReq();
  virtual ~room_createReq();

  room_createReq(const room_createReq& from);
  room_createReq(room_createReq&& from) noexcept
    : room_createReq() {
    *this = ::std::move(from);
  }

  inline room_createReq& operator=(const room_createReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_createReq& operator=(room_createReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_createReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_createReq* internal_default_instance() {
    return reinterpret_cast<const room_createReq*>(
               &_room_createReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(room_createReq& a, room_createReq& b) {
    a.Swap(&b);
  }
  inline void Swap(room_createReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_createReq* New() const final {
    return CreateMaybeMessage<room_createReq>(nullptr);
  }

  room_createReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_createReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_createReq& from);
  void MergeFrom(const room_createReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_createReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.room_createReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRoomtypeFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 roomtype = 2;
  bool has_roomtype() const;
  void clear_roomtype();
  ::PROTOBUF_NAMESPACE_ID::int32 roomtype() const;
  void set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.room_createReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomtype_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class room_createRespone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.room_createRespone) */ {
 public:
  room_createRespone();
  virtual ~room_createRespone();

  room_createRespone(const room_createRespone& from);
  room_createRespone(room_createRespone&& from) noexcept
    : room_createRespone() {
    *this = ::std::move(from);
  }

  inline room_createRespone& operator=(const room_createRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_createRespone& operator=(room_createRespone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_createRespone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_createRespone* internal_default_instance() {
    return reinterpret_cast<const room_createRespone*>(
               &_room_createRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(room_createRespone& a, room_createRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(room_createRespone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_createRespone* New() const final {
    return CreateMaybeMessage<room_createRespone>(nullptr);
  }

  room_createRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_createRespone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_createRespone& from);
  void MergeFrom(const room_createRespone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_createRespone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.room_createRespone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorcodeFieldNumber = 1,
    kRoomidFieldNumber = 2,
  };
  // required int32 errorcode = 1;
  bool has_errorcode() const;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.room_createRespone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class room_joinReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.room_joinReq) */ {
 public:
  room_joinReq();
  virtual ~room_joinReq();

  room_joinReq(const room_joinReq& from);
  room_joinReq(room_joinReq&& from) noexcept
    : room_joinReq() {
    *this = ::std::move(from);
  }

  inline room_joinReq& operator=(const room_joinReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_joinReq& operator=(room_joinReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_joinReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_joinReq* internal_default_instance() {
    return reinterpret_cast<const room_joinReq*>(
               &_room_joinReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(room_joinReq& a, room_joinReq& b) {
    a.Swap(&b);
  }
  inline void Swap(room_joinReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_joinReq* New() const final {
    return CreateMaybeMessage<room_joinReq>(nullptr);
  }

  room_joinReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_joinReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_joinReq& from);
  void MergeFrom(const room_joinReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_joinReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.room_joinReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRoomidFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.room_joinReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class room_joinRespone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.room_joinRespone) */ {
 public:
  room_joinRespone();
  virtual ~room_joinRespone();

  room_joinRespone(const room_joinRespone& from);
  room_joinRespone(room_joinRespone&& from) noexcept
    : room_joinRespone() {
    *this = ::std::move(from);
  }

  inline room_joinRespone& operator=(const room_joinRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_joinRespone& operator=(room_joinRespone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_joinRespone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_joinRespone* internal_default_instance() {
    return reinterpret_cast<const room_joinRespone*>(
               &_room_joinRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(room_joinRespone& a, room_joinRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(room_joinRespone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_joinRespone* New() const final {
    return CreateMaybeMessage<room_joinRespone>(nullptr);
  }

  room_joinRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_joinRespone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_joinRespone& from);
  void MergeFrom(const room_joinRespone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_joinRespone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.room_joinRespone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPdFieldNumber = 2,
    kErrorcodeFieldNumber = 1,
  };
  // repeated .ccg_pb.PlayerData pd = 2;
  int pd_size() const;
  void clear_pd();
  ::ccg_pb::PlayerData* mutable_pd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::PlayerData >*
      mutable_pd();
  const ::ccg_pb::PlayerData& pd(int index) const;
  ::ccg_pb::PlayerData* add_pd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::PlayerData >&
      pd() const;

  // required int32 errorcode = 1;
  bool has_errorcode() const;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.room_joinRespone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::PlayerData > pd_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class room_playerReady :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.room_playerReady) */ {
 public:
  room_playerReady();
  virtual ~room_playerReady();

  room_playerReady(const room_playerReady& from);
  room_playerReady(room_playerReady&& from) noexcept
    : room_playerReady() {
    *this = ::std::move(from);
  }

  inline room_playerReady& operator=(const room_playerReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_playerReady& operator=(room_playerReady&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_playerReady& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_playerReady* internal_default_instance() {
    return reinterpret_cast<const room_playerReady*>(
               &_room_playerReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(room_playerReady& a, room_playerReady& b) {
    a.Swap(&b);
  }
  inline void Swap(room_playerReady* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_playerReady* New() const final {
    return CreateMaybeMessage<room_playerReady>(nullptr);
  }

  room_playerReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_playerReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_playerReady& from);
  void MergeFrom(const room_playerReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_playerReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.room_playerReady";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.room_playerReady)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class room_playerReadyRespone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.room_playerReadyRespone) */ {
 public:
  room_playerReadyRespone();
  virtual ~room_playerReadyRespone();

  room_playerReadyRespone(const room_playerReadyRespone& from);
  room_playerReadyRespone(room_playerReadyRespone&& from) noexcept
    : room_playerReadyRespone() {
    *this = ::std::move(from);
  }

  inline room_playerReadyRespone& operator=(const room_playerReadyRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_playerReadyRespone& operator=(room_playerReadyRespone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_playerReadyRespone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_playerReadyRespone* internal_default_instance() {
    return reinterpret_cast<const room_playerReadyRespone*>(
               &_room_playerReadyRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(room_playerReadyRespone& a, room_playerReadyRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(room_playerReadyRespone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_playerReadyRespone* New() const final {
    return CreateMaybeMessage<room_playerReadyRespone>(nullptr);
  }

  room_playerReadyRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_playerReadyRespone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_playerReadyRespone& from);
  void MergeFrom(const room_playerReadyRespone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_playerReadyRespone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.room_playerReadyRespone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.room_playerReadyRespone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class room_gamestartRespone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.room_gamestartRespone) */ {
 public:
  room_gamestartRespone();
  virtual ~room_gamestartRespone();

  room_gamestartRespone(const room_gamestartRespone& from);
  room_gamestartRespone(room_gamestartRespone&& from) noexcept
    : room_gamestartRespone() {
    *this = ::std::move(from);
  }

  inline room_gamestartRespone& operator=(const room_gamestartRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_gamestartRespone& operator=(room_gamestartRespone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_gamestartRespone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const room_gamestartRespone* internal_default_instance() {
    return reinterpret_cast<const room_gamestartRespone*>(
               &_room_gamestartRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(room_gamestartRespone& a, room_gamestartRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(room_gamestartRespone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_gamestartRespone* New() const final {
    return CreateMaybeMessage<room_gamestartRespone>(nullptr);
  }

  room_gamestartRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_gamestartRespone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_gamestartRespone& from);
  void MergeFrom(const room_gamestartRespone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_gamestartRespone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.room_gamestartRespone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .ccg_pb.poker pk = 2;
  int pk_size() const;
  void clear_pk();
  ::ccg_pb::poker* mutable_pk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >*
      mutable_pk();
  const ::ccg_pb::poker& pk(int index) const;
  ::ccg_pb::poker* add_pk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >&
      pk() const;

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.room_gamestartRespone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker > pk_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class poker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.poker) */ {
 public:
  poker();
  virtual ~poker();

  poker(const poker& from);
  poker(poker&& from) noexcept
    : poker() {
    *this = ::std::move(from);
  }

  inline poker& operator=(const poker& from) {
    CopyFrom(from);
    return *this;
  }
  inline poker& operator=(poker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const poker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const poker* internal_default_instance() {
    return reinterpret_cast<const poker*>(
               &_poker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(poker& a, poker& b) {
    a.Swap(&b);
  }
  inline void Swap(poker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline poker* New() const final {
    return CreateMaybeMessage<poker>(nullptr);
  }

  poker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<poker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const poker& from);
  void MergeFrom(const poker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(poker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.poker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.poker)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class call :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.call) */ {
 public:
  call();
  virtual ~call();

  call(const call& from);
  call(call&& from) noexcept
    : call() {
    *this = ::std::move(from);
  }

  inline call& operator=(const call& from) {
    CopyFrom(from);
    return *this;
  }
  inline call& operator=(call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const call* internal_default_instance() {
    return reinterpret_cast<const call*>(
               &_call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(call& a, call& b) {
    a.Swap(&b);
  }
  inline void Swap(call* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call* New() const final {
    return CreateMaybeMessage<call>(nullptr);
  }

  call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const call& from);
  void MergeFrom(const call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.call";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 num = 2;
  bool has_num() const;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.call)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class call_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.call_Respone) */ {
 public:
  call_Respone();
  virtual ~call_Respone();

  call_Respone(const call_Respone& from);
  call_Respone(call_Respone&& from) noexcept
    : call_Respone() {
    *this = ::std::move(from);
  }

  inline call_Respone& operator=(const call_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_Respone& operator=(call_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const call_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const call_Respone* internal_default_instance() {
    return reinterpret_cast<const call_Respone*>(
               &_call_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(call_Respone& a, call_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(call_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_Respone* New() const final {
    return CreateMaybeMessage<call_Respone>(nullptr);
  }

  call_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const call_Respone& from);
  void MergeFrom(const call_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.call_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
    kNextcallidFieldNumber = 3,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 num = 2;
  bool has_num() const;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 nextcallid = 3;
  bool has_nextcallid() const;
  void clear_nextcallid();
  ::PROTOBUF_NAMESPACE_ID::int32 nextcallid() const;
  void set_nextcallid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.call_Respone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextcallid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class call_begin_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.call_begin_Respone) */ {
 public:
  call_begin_Respone();
  virtual ~call_begin_Respone();

  call_begin_Respone(const call_begin_Respone& from);
  call_begin_Respone(call_begin_Respone&& from) noexcept
    : call_begin_Respone() {
    *this = ::std::move(from);
  }

  inline call_begin_Respone& operator=(const call_begin_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_begin_Respone& operator=(call_begin_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const call_begin_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const call_begin_Respone* internal_default_instance() {
    return reinterpret_cast<const call_begin_Respone*>(
               &_call_begin_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(call_begin_Respone& a, call_begin_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(call_begin_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_begin_Respone* New() const final {
    return CreateMaybeMessage<call_begin_Respone>(nullptr);
  }

  call_begin_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_begin_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const call_begin_Respone& from);
  void MergeFrom(const call_begin_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_begin_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.call_begin_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 num = 2;
  bool has_num() const;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.call_begin_Respone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class pokerout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.pokerout) */ {
 public:
  pokerout();
  virtual ~pokerout();

  pokerout(const pokerout& from);
  pokerout(pokerout&& from) noexcept
    : pokerout() {
    *this = ::std::move(from);
  }

  inline pokerout& operator=(const pokerout& from) {
    CopyFrom(from);
    return *this;
  }
  inline pokerout& operator=(pokerout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pokerout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pokerout* internal_default_instance() {
    return reinterpret_cast<const pokerout*>(
               &_pokerout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(pokerout& a, pokerout& b) {
    a.Swap(&b);
  }
  inline void Swap(pokerout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pokerout* New() const final {
    return CreateMaybeMessage<pokerout>(nullptr);
  }

  pokerout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pokerout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pokerout& from);
  void MergeFrom(const pokerout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pokerout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.pokerout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .ccg_pb.poker pk = 2;
  int pk_size() const;
  void clear_pk();
  ::ccg_pb::poker* mutable_pk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >*
      mutable_pk();
  const ::ccg_pb::poker& pk(int index) const;
  ::ccg_pb::poker* add_pk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >&
      pk() const;

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.pokerout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker > pk_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class pokerout_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.pokerout_Respone) */ {
 public:
  pokerout_Respone();
  virtual ~pokerout_Respone();

  pokerout_Respone(const pokerout_Respone& from);
  pokerout_Respone(pokerout_Respone&& from) noexcept
    : pokerout_Respone() {
    *this = ::std::move(from);
  }

  inline pokerout_Respone& operator=(const pokerout_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline pokerout_Respone& operator=(pokerout_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pokerout_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pokerout_Respone* internal_default_instance() {
    return reinterpret_cast<const pokerout_Respone*>(
               &_pokerout_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(pokerout_Respone& a, pokerout_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(pokerout_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pokerout_Respone* New() const final {
    return CreateMaybeMessage<pokerout_Respone>(nullptr);
  }

  pokerout_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pokerout_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pokerout_Respone& from);
  void MergeFrom(const pokerout_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pokerout_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.pokerout_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 2,
    kIdFieldNumber = 1,
    kNextidFieldNumber = 3,
  };
  // repeated .ccg_pb.poker pk = 2;
  int pk_size() const;
  void clear_pk();
  ::ccg_pb::poker* mutable_pk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >*
      mutable_pk();
  const ::ccg_pb::poker& pk(int index) const;
  ::ccg_pb::poker* add_pk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >&
      pk() const;

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 nextid = 3;
  bool has_nextid() const;
  void clear_nextid();
  ::PROTOBUF_NAMESPACE_ID::int32 nextid() const;
  void set_nextid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.pokerout_Respone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker > pk_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class gameend_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.gameend_Respone) */ {
 public:
  gameend_Respone();
  virtual ~gameend_Respone();

  gameend_Respone(const gameend_Respone& from);
  gameend_Respone(gameend_Respone&& from) noexcept
    : gameend_Respone() {
    *this = ::std::move(from);
  }

  inline gameend_Respone& operator=(const gameend_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline gameend_Respone& operator=(gameend_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const gameend_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gameend_Respone* internal_default_instance() {
    return reinterpret_cast<const gameend_Respone*>(
               &_gameend_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(gameend_Respone& a, gameend_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(gameend_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gameend_Respone* New() const final {
    return CreateMaybeMessage<gameend_Respone>(nullptr);
  }

  gameend_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gameend_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gameend_Respone& from);
  void MergeFrom(const gameend_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gameend_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.gameend_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ccg_pb.gameend_Respone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class chattext :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.chattext) */ {
 public:
  chattext();
  virtual ~chattext();

  chattext(const chattext& from);
  chattext(chattext&& from) noexcept
    : chattext() {
    *this = ::std::move(from);
  }

  inline chattext& operator=(const chattext& from) {
    CopyFrom(from);
    return *this;
  }
  inline chattext& operator=(chattext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chattext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chattext* internal_default_instance() {
    return reinterpret_cast<const chattext*>(
               &_chattext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(chattext& a, chattext& b) {
    a.Swap(&b);
  }
  inline void Swap(chattext* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chattext* New() const final {
    return CreateMaybeMessage<chattext>(nullptr);
  }

  chattext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chattext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chattext& from);
  void MergeFrom(const chattext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chattext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.chattext";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTextidFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 textid = 2;
  bool has_textid() const;
  void clear_textid();
  ::PROTOBUF_NAMESPACE_ID::int32 textid() const;
  void set_textid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.chattext)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 textid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class chatemo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.chatemo) */ {
 public:
  chatemo();
  virtual ~chatemo();

  chatemo(const chatemo& from);
  chatemo(chatemo&& from) noexcept
    : chatemo() {
    *this = ::std::move(from);
  }

  inline chatemo& operator=(const chatemo& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatemo& operator=(chatemo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatemo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatemo* internal_default_instance() {
    return reinterpret_cast<const chatemo*>(
               &_chatemo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(chatemo& a, chatemo& b) {
    a.Swap(&b);
  }
  inline void Swap(chatemo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatemo* New() const final {
    return CreateMaybeMessage<chatemo>(nullptr);
  }

  chatemo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatemo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatemo& from);
  void MergeFrom(const chatemo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatemo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.chatemo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEmoidFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 emoid = 2;
  bool has_emoid() const;
  void clear_emoid();
  ::PROTOBUF_NAMESPACE_ID::int32 emoid() const;
  void set_emoid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.chatemo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 emoid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class chatstring :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.chatstring) */ {
 public:
  chatstring();
  virtual ~chatstring();

  chatstring(const chatstring& from);
  chatstring(chatstring&& from) noexcept
    : chatstring() {
    *this = ::std::move(from);
  }

  inline chatstring& operator=(const chatstring& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatstring& operator=(chatstring&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatstring& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatstring* internal_default_instance() {
    return reinterpret_cast<const chatstring*>(
               &_chatstring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(chatstring& a, chatstring& b) {
    a.Swap(&b);
  }
  inline void Swap(chatstring* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatstring* New() const final {
    return CreateMaybeMessage<chatstring>(nullptr);
  }

  chatstring* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatstring>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatstring& from);
  void MergeFrom(const chatstring& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatstring* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.chatstring";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string str = 2;
  bool has_str() const;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.chatstring)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class chattext_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.chattext_Respone) */ {
 public:
  chattext_Respone();
  virtual ~chattext_Respone();

  chattext_Respone(const chattext_Respone& from);
  chattext_Respone(chattext_Respone&& from) noexcept
    : chattext_Respone() {
    *this = ::std::move(from);
  }

  inline chattext_Respone& operator=(const chattext_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline chattext_Respone& operator=(chattext_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chattext_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chattext_Respone* internal_default_instance() {
    return reinterpret_cast<const chattext_Respone*>(
               &_chattext_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(chattext_Respone& a, chattext_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(chattext_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chattext_Respone* New() const final {
    return CreateMaybeMessage<chattext_Respone>(nullptr);
  }

  chattext_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chattext_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chattext_Respone& from);
  void MergeFrom(const chattext_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chattext_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.chattext_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTextidFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 textid = 2;
  bool has_textid() const;
  void clear_textid();
  ::PROTOBUF_NAMESPACE_ID::int32 textid() const;
  void set_textid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.chattext_Respone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 textid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class chatemo_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.chatemo_Respone) */ {
 public:
  chatemo_Respone();
  virtual ~chatemo_Respone();

  chatemo_Respone(const chatemo_Respone& from);
  chatemo_Respone(chatemo_Respone&& from) noexcept
    : chatemo_Respone() {
    *this = ::std::move(from);
  }

  inline chatemo_Respone& operator=(const chatemo_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatemo_Respone& operator=(chatemo_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatemo_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatemo_Respone* internal_default_instance() {
    return reinterpret_cast<const chatemo_Respone*>(
               &_chatemo_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(chatemo_Respone& a, chatemo_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(chatemo_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatemo_Respone* New() const final {
    return CreateMaybeMessage<chatemo_Respone>(nullptr);
  }

  chatemo_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatemo_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatemo_Respone& from);
  void MergeFrom(const chatemo_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatemo_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.chatemo_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEmoidFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 emoid = 2;
  bool has_emoid() const;
  void clear_emoid();
  ::PROTOBUF_NAMESPACE_ID::int32 emoid() const;
  void set_emoid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.chatemo_Respone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 emoid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class chatstring_Respone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccg_pb.chatstring_Respone) */ {
 public:
  chatstring_Respone();
  virtual ~chatstring_Respone();

  chatstring_Respone(const chatstring_Respone& from);
  chatstring_Respone(chatstring_Respone&& from) noexcept
    : chatstring_Respone() {
    *this = ::std::move(from);
  }

  inline chatstring_Respone& operator=(const chatstring_Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatstring_Respone& operator=(chatstring_Respone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatstring_Respone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatstring_Respone* internal_default_instance() {
    return reinterpret_cast<const chatstring_Respone*>(
               &_chatstring_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(chatstring_Respone& a, chatstring_Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(chatstring_Respone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatstring_Respone* New() const final {
    return CreateMaybeMessage<chatstring_Respone>(nullptr);
  }

  chatstring_Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatstring_Respone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatstring_Respone& from);
  void MergeFrom(const chatstring_Respone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatstring_Respone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccg_pb.chatstring_Respone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string str = 2;
  bool has_str() const;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ccg_pb.chatstring_Respone)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerData

// required int32 id = 1;
inline bool PlayerData::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerData::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerData::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.PlayerData.id)
  return id_;
}
inline void PlayerData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.PlayerData.id)
}

// required string nick = 2;
inline bool PlayerData::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerData::nick() const {
  // @@protoc_insertion_point(field_get:ccg_pb.PlayerData.nick)
  return nick_.GetNoArena();
}
inline void PlayerData::set_nick(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.PlayerData.nick)
}
inline void PlayerData::set_nick(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.PlayerData.nick)
}
inline void PlayerData::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.PlayerData.nick)
}
inline void PlayerData::set_nick(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.PlayerData.nick)
}
inline std::string* PlayerData::mutable_nick() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.PlayerData.nick)
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerData::release_nick() {
  // @@protoc_insertion_point(field_release:ccg_pb.PlayerData.nick)
  if (!has_nick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nick_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.PlayerData.nick)
}

// required string headurl = 3;
inline bool PlayerData::has_headurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerData::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerData::headurl() const {
  // @@protoc_insertion_point(field_get:ccg_pb.PlayerData.headurl)
  return headurl_.GetNoArena();
}
inline void PlayerData::set_headurl(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.PlayerData.headurl)
}
inline void PlayerData::set_headurl(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.PlayerData.headurl)
}
inline void PlayerData::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.PlayerData.headurl)
}
inline void PlayerData::set_headurl(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.PlayerData.headurl)
}
inline std::string* PlayerData::mutable_headurl() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.PlayerData.headurl)
  return headurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerData::release_headurl() {
  // @@protoc_insertion_point(field_release:ccg_pb.PlayerData.headurl)
  if (!has_headurl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return headurl_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_allocated_headurl(std::string* headurl) {
  if (headurl != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  headurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.PlayerData.headurl)
}

// required int32 status = 4;
inline bool PlayerData::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerData::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerData::status() const {
  // @@protoc_insertion_point(field_get:ccg_pb.PlayerData.status)
  return status_;
}
inline void PlayerData::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.PlayerData.status)
}

// -------------------------------------------------------------------

// login_namepasswordReq

// required string name = 1;
inline bool login_namepasswordReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_namepasswordReq::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_namepasswordReq::name() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_namepasswordReq.name)
  return name_.GetNoArena();
}
inline void login_namepasswordReq::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.login_namepasswordReq.name)
}
inline void login_namepasswordReq::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.login_namepasswordReq.name)
}
inline void login_namepasswordReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.login_namepasswordReq.name)
}
inline void login_namepasswordReq::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.login_namepasswordReq.name)
}
inline std::string* login_namepasswordReq::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.login_namepasswordReq.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* login_namepasswordReq::release_name() {
  // @@protoc_insertion_point(field_release:ccg_pb.login_namepasswordReq.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void login_namepasswordReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.login_namepasswordReq.name)
}

// required string password = 2;
inline bool login_namepasswordReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_namepasswordReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& login_namepasswordReq::password() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_namepasswordReq.password)
  return password_.GetNoArena();
}
inline void login_namepasswordReq::set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.login_namepasswordReq.password)
}
inline void login_namepasswordReq::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.login_namepasswordReq.password)
}
inline void login_namepasswordReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.login_namepasswordReq.password)
}
inline void login_namepasswordReq::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.login_namepasswordReq.password)
}
inline std::string* login_namepasswordReq::mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.login_namepasswordReq.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* login_namepasswordReq::release_password() {
  // @@protoc_insertion_point(field_release:ccg_pb.login_namepasswordReq.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void login_namepasswordReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.login_namepasswordReq.password)
}

// required int32 DeviceType = 3;
inline bool login_namepasswordReq::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_namepasswordReq::clear_devicetype() {
  devicetype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_namepasswordReq::devicetype() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_namepasswordReq.DeviceType)
  return devicetype_;
}
inline void login_namepasswordReq::set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.login_namepasswordReq.DeviceType)
}

// -------------------------------------------------------------------

// login_DeviceReq

// required string udid = 1;
inline bool login_DeviceReq::has_udid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_DeviceReq::clear_udid() {
  udid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_DeviceReq::udid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_DeviceReq.udid)
  return udid_.GetNoArena();
}
inline void login_DeviceReq::set_udid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.login_DeviceReq.udid)
}
inline void login_DeviceReq::set_udid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.login_DeviceReq.udid)
}
inline void login_DeviceReq::set_udid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.login_DeviceReq.udid)
}
inline void login_DeviceReq::set_udid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.login_DeviceReq.udid)
}
inline std::string* login_DeviceReq::mutable_udid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.login_DeviceReq.udid)
  return udid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* login_DeviceReq::release_udid() {
  // @@protoc_insertion_point(field_release:ccg_pb.login_DeviceReq.udid)
  if (!has_udid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return udid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void login_DeviceReq::set_allocated_udid(std::string* udid) {
  if (udid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  udid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udid);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.login_DeviceReq.udid)
}

// required int32 DeviceType = 2;
inline bool login_DeviceReq::has_devicetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_DeviceReq::clear_devicetype() {
  devicetype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_DeviceReq::devicetype() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_DeviceReq.DeviceType)
  return devicetype_;
}
inline void login_DeviceReq::set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.login_DeviceReq.DeviceType)
}

// -------------------------------------------------------------------

// login_wechatReq

// required string udid = 1;
inline bool login_wechatReq::has_udid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_wechatReq::clear_udid() {
  udid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_wechatReq::udid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_wechatReq.udid)
  return udid_.GetNoArena();
}
inline void login_wechatReq::set_udid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.login_wechatReq.udid)
}
inline void login_wechatReq::set_udid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.login_wechatReq.udid)
}
inline void login_wechatReq::set_udid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.login_wechatReq.udid)
}
inline void login_wechatReq::set_udid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  udid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.login_wechatReq.udid)
}
inline std::string* login_wechatReq::mutable_udid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.login_wechatReq.udid)
  return udid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* login_wechatReq::release_udid() {
  // @@protoc_insertion_point(field_release:ccg_pb.login_wechatReq.udid)
  if (!has_udid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return udid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void login_wechatReq::set_allocated_udid(std::string* udid) {
  if (udid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  udid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udid);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.login_wechatReq.udid)
}

// required int32 DeviceType = 2;
inline bool login_wechatReq::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_wechatReq::clear_devicetype() {
  devicetype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_wechatReq::devicetype() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_wechatReq.DeviceType)
  return devicetype_;
}
inline void login_wechatReq::set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.login_wechatReq.DeviceType)
}

// required string headurl = 3;
inline bool login_wechatReq::has_headurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_wechatReq::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& login_wechatReq::headurl() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_wechatReq.headurl)
  return headurl_.GetNoArena();
}
inline void login_wechatReq::set_headurl(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.login_wechatReq.headurl)
}
inline void login_wechatReq::set_headurl(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.login_wechatReq.headurl)
}
inline void login_wechatReq::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.login_wechatReq.headurl)
}
inline void login_wechatReq::set_headurl(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.login_wechatReq.headurl)
}
inline std::string* login_wechatReq::mutable_headurl() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.login_wechatReq.headurl)
  return headurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* login_wechatReq::release_headurl() {
  // @@protoc_insertion_point(field_release:ccg_pb.login_wechatReq.headurl)
  if (!has_headurl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return headurl_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void login_wechatReq::set_allocated_headurl(std::string* headurl) {
  if (headurl != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  headurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.login_wechatReq.headurl)
}

// required int32 type = 4;
inline bool login_wechatReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void login_wechatReq::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_wechatReq::type() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_wechatReq.type)
  return type_;
}
inline void login_wechatReq::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.login_wechatReq.type)
}

// -------------------------------------------------------------------

// login_Respone

// required int32 type = 1;
inline bool login_Respone::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_Respone::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_Respone::type() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_Respone.type)
  return type_;
}
inline void login_Respone::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.login_Respone.type)
}

// required string nick = 2;
inline bool login_Respone::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_Respone::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_Respone::nick() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_Respone.nick)
  return nick_.GetNoArena();
}
inline void login_Respone::set_nick(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.login_Respone.nick)
}
inline void login_Respone::set_nick(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.login_Respone.nick)
}
inline void login_Respone::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.login_Respone.nick)
}
inline void login_Respone::set_nick(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.login_Respone.nick)
}
inline std::string* login_Respone::mutable_nick() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.login_Respone.nick)
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* login_Respone::release_nick() {
  // @@protoc_insertion_point(field_release:ccg_pb.login_Respone.nick)
  if (!has_nick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nick_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void login_Respone::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.login_Respone.nick)
}

// required int32 id = 3;
inline bool login_Respone::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_Respone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_Respone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.login_Respone.id)
  return id_;
}
inline void login_Respone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.login_Respone.id)
}

// -------------------------------------------------------------------

// room_createReq

// required int32 id = 1;
inline bool room_createReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_createReq::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_createReq::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_createReq.id)
  return id_;
}
inline void room_createReq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_createReq.id)
}

// required int32 roomtype = 2;
inline bool room_createReq::has_roomtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void room_createReq::clear_roomtype() {
  roomtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_createReq::roomtype() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_createReq.roomtype)
  return roomtype_;
}
inline void room_createReq::set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  roomtype_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_createReq.roomtype)
}

// -------------------------------------------------------------------

// room_createRespone

// required int32 errorcode = 1;
inline bool room_createRespone::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_createRespone::clear_errorcode() {
  errorcode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_createRespone::errorcode() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_createRespone.errorcode)
  return errorcode_;
}
inline void room_createRespone::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_createRespone.errorcode)
}

// required int32 roomid = 2;
inline bool room_createRespone::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void room_createRespone::clear_roomid() {
  roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_createRespone::roomid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_createRespone.roomid)
  return roomid_;
}
inline void room_createRespone::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  roomid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_createRespone.roomid)
}

// -------------------------------------------------------------------

// room_joinReq

// required int32 id = 1;
inline bool room_joinReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_joinReq::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_joinReq::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_joinReq.id)
  return id_;
}
inline void room_joinReq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_joinReq.id)
}

// required int32 roomid = 2;
inline bool room_joinReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void room_joinReq::clear_roomid() {
  roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_joinReq::roomid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_joinReq.roomid)
  return roomid_;
}
inline void room_joinReq::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  roomid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_joinReq.roomid)
}

// -------------------------------------------------------------------

// room_joinRespone

// required int32 errorcode = 1;
inline bool room_joinRespone::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_joinRespone::clear_errorcode() {
  errorcode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_joinRespone::errorcode() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_joinRespone.errorcode)
  return errorcode_;
}
inline void room_joinRespone::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_joinRespone.errorcode)
}

// repeated .ccg_pb.PlayerData pd = 2;
inline int room_joinRespone::pd_size() const {
  return pd_.size();
}
inline void room_joinRespone::clear_pd() {
  pd_.Clear();
}
inline ::ccg_pb::PlayerData* room_joinRespone::mutable_pd(int index) {
  // @@protoc_insertion_point(field_mutable:ccg_pb.room_joinRespone.pd)
  return pd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::PlayerData >*
room_joinRespone::mutable_pd() {
  // @@protoc_insertion_point(field_mutable_list:ccg_pb.room_joinRespone.pd)
  return &pd_;
}
inline const ::ccg_pb::PlayerData& room_joinRespone::pd(int index) const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_joinRespone.pd)
  return pd_.Get(index);
}
inline ::ccg_pb::PlayerData* room_joinRespone::add_pd() {
  // @@protoc_insertion_point(field_add:ccg_pb.room_joinRespone.pd)
  return pd_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::PlayerData >&
room_joinRespone::pd() const {
  // @@protoc_insertion_point(field_list:ccg_pb.room_joinRespone.pd)
  return pd_;
}

// -------------------------------------------------------------------

// room_playerReady

// required int32 id = 1;
inline bool room_playerReady::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_playerReady::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_playerReady::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_playerReady.id)
  return id_;
}
inline void room_playerReady::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_playerReady.id)
}

// -------------------------------------------------------------------

// room_playerReadyRespone

// required int32 id = 1;
inline bool room_playerReadyRespone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_playerReadyRespone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_playerReadyRespone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_playerReadyRespone.id)
  return id_;
}
inline void room_playerReadyRespone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_playerReadyRespone.id)
}

// -------------------------------------------------------------------

// room_gamestartRespone

// required int32 id = 1;
inline bool room_gamestartRespone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_gamestartRespone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 room_gamestartRespone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_gamestartRespone.id)
  return id_;
}
inline void room_gamestartRespone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.room_gamestartRespone.id)
}

// repeated .ccg_pb.poker pk = 2;
inline int room_gamestartRespone::pk_size() const {
  return pk_.size();
}
inline void room_gamestartRespone::clear_pk() {
  pk_.Clear();
}
inline ::ccg_pb::poker* room_gamestartRespone::mutable_pk(int index) {
  // @@protoc_insertion_point(field_mutable:ccg_pb.room_gamestartRespone.pk)
  return pk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >*
room_gamestartRespone::mutable_pk() {
  // @@protoc_insertion_point(field_mutable_list:ccg_pb.room_gamestartRespone.pk)
  return &pk_;
}
inline const ::ccg_pb::poker& room_gamestartRespone::pk(int index) const {
  // @@protoc_insertion_point(field_get:ccg_pb.room_gamestartRespone.pk)
  return pk_.Get(index);
}
inline ::ccg_pb::poker* room_gamestartRespone::add_pk() {
  // @@protoc_insertion_point(field_add:ccg_pb.room_gamestartRespone.pk)
  return pk_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >&
room_gamestartRespone::pk() const {
  // @@protoc_insertion_point(field_list:ccg_pb.room_gamestartRespone.pk)
  return pk_;
}

// -------------------------------------------------------------------

// poker

// required int32 id = 1;
inline bool poker::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void poker::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poker::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.poker.id)
  return id_;
}
inline void poker::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.poker.id)
}

// required int32 type = 2;
inline bool poker::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void poker::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poker::type() const {
  // @@protoc_insertion_point(field_get:ccg_pb.poker.type)
  return type_;
}
inline void poker::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.poker.type)
}

// -------------------------------------------------------------------

// call

// required int32 id = 1;
inline bool call::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void call::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 call::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.call.id)
  return id_;
}
inline void call::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.call.id)
}

// required int32 num = 2;
inline bool call::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void call::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 call::num() const {
  // @@protoc_insertion_point(field_get:ccg_pb.call.num)
  return num_;
}
inline void call::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.call.num)
}

// -------------------------------------------------------------------

// call_Respone

// required int32 id = 1;
inline bool call_Respone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void call_Respone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 call_Respone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.call_Respone.id)
  return id_;
}
inline void call_Respone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.call_Respone.id)
}

// required int32 num = 2;
inline bool call_Respone::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void call_Respone::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 call_Respone::num() const {
  // @@protoc_insertion_point(field_get:ccg_pb.call_Respone.num)
  return num_;
}
inline void call_Respone::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.call_Respone.num)
}

// required int32 nextcallid = 3;
inline bool call_Respone::has_nextcallid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void call_Respone::clear_nextcallid() {
  nextcallid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 call_Respone::nextcallid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.call_Respone.nextcallid)
  return nextcallid_;
}
inline void call_Respone::set_nextcallid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  nextcallid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.call_Respone.nextcallid)
}

// -------------------------------------------------------------------

// call_begin_Respone

// required int32 id = 1;
inline bool call_begin_Respone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void call_begin_Respone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 call_begin_Respone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.call_begin_Respone.id)
  return id_;
}
inline void call_begin_Respone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.call_begin_Respone.id)
}

// required int32 num = 2;
inline bool call_begin_Respone::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void call_begin_Respone::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 call_begin_Respone::num() const {
  // @@protoc_insertion_point(field_get:ccg_pb.call_begin_Respone.num)
  return num_;
}
inline void call_begin_Respone::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.call_begin_Respone.num)
}

// -------------------------------------------------------------------

// pokerout

// required int32 id = 1;
inline bool pokerout::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pokerout::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pokerout::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.pokerout.id)
  return id_;
}
inline void pokerout::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.pokerout.id)
}

// repeated .ccg_pb.poker pk = 2;
inline int pokerout::pk_size() const {
  return pk_.size();
}
inline void pokerout::clear_pk() {
  pk_.Clear();
}
inline ::ccg_pb::poker* pokerout::mutable_pk(int index) {
  // @@protoc_insertion_point(field_mutable:ccg_pb.pokerout.pk)
  return pk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >*
pokerout::mutable_pk() {
  // @@protoc_insertion_point(field_mutable_list:ccg_pb.pokerout.pk)
  return &pk_;
}
inline const ::ccg_pb::poker& pokerout::pk(int index) const {
  // @@protoc_insertion_point(field_get:ccg_pb.pokerout.pk)
  return pk_.Get(index);
}
inline ::ccg_pb::poker* pokerout::add_pk() {
  // @@protoc_insertion_point(field_add:ccg_pb.pokerout.pk)
  return pk_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >&
pokerout::pk() const {
  // @@protoc_insertion_point(field_list:ccg_pb.pokerout.pk)
  return pk_;
}

// -------------------------------------------------------------------

// pokerout_Respone

// required int32 id = 1;
inline bool pokerout_Respone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pokerout_Respone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pokerout_Respone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.pokerout_Respone.id)
  return id_;
}
inline void pokerout_Respone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.pokerout_Respone.id)
}

// repeated .ccg_pb.poker pk = 2;
inline int pokerout_Respone::pk_size() const {
  return pk_.size();
}
inline void pokerout_Respone::clear_pk() {
  pk_.Clear();
}
inline ::ccg_pb::poker* pokerout_Respone::mutable_pk(int index) {
  // @@protoc_insertion_point(field_mutable:ccg_pb.pokerout_Respone.pk)
  return pk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >*
pokerout_Respone::mutable_pk() {
  // @@protoc_insertion_point(field_mutable_list:ccg_pb.pokerout_Respone.pk)
  return &pk_;
}
inline const ::ccg_pb::poker& pokerout_Respone::pk(int index) const {
  // @@protoc_insertion_point(field_get:ccg_pb.pokerout_Respone.pk)
  return pk_.Get(index);
}
inline ::ccg_pb::poker* pokerout_Respone::add_pk() {
  // @@protoc_insertion_point(field_add:ccg_pb.pokerout_Respone.pk)
  return pk_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccg_pb::poker >&
pokerout_Respone::pk() const {
  // @@protoc_insertion_point(field_list:ccg_pb.pokerout_Respone.pk)
  return pk_;
}

// required int32 nextid = 3;
inline bool pokerout_Respone::has_nextid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pokerout_Respone::clear_nextid() {
  nextid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pokerout_Respone::nextid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.pokerout_Respone.nextid)
  return nextid_;
}
inline void pokerout_Respone::set_nextid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nextid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.pokerout_Respone.nextid)
}

// -------------------------------------------------------------------

// gameend_Respone

// -------------------------------------------------------------------

// chattext

// required int32 id = 1;
inline bool chattext::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chattext::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chattext::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chattext.id)
  return id_;
}
inline void chattext::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chattext.id)
}

// required int32 textid = 2;
inline bool chattext::has_textid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chattext::clear_textid() {
  textid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chattext::textid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chattext.textid)
  return textid_;
}
inline void chattext::set_textid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  textid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chattext.textid)
}

// -------------------------------------------------------------------

// chatemo

// required int32 id = 1;
inline bool chatemo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatemo::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatemo::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatemo.id)
  return id_;
}
inline void chatemo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chatemo.id)
}

// required int32 emoid = 2;
inline bool chatemo::has_emoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatemo::clear_emoid() {
  emoid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatemo::emoid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatemo.emoid)
  return emoid_;
}
inline void chatemo::set_emoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  emoid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chatemo.emoid)
}

// -------------------------------------------------------------------

// chatstring

// required int32 id = 1;
inline bool chatstring::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatstring::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatstring::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatstring.id)
  return id_;
}
inline void chatstring::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chatstring.id)
}

// required string str = 2;
inline bool chatstring::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatstring::clear_str() {
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& chatstring::str() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatstring.str)
  return str_.GetNoArena();
}
inline void chatstring::set_str(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.chatstring.str)
}
inline void chatstring::set_str(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.chatstring.str)
}
inline void chatstring::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.chatstring.str)
}
inline void chatstring::set_str(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.chatstring.str)
}
inline std::string* chatstring::mutable_str() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.chatstring.str)
  return str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatstring::release_str() {
  // @@protoc_insertion_point(field_release:ccg_pb.chatstring.str)
  if (!has_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatstring::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.chatstring.str)
}

// -------------------------------------------------------------------

// chattext_Respone

// required int32 id = 1;
inline bool chattext_Respone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chattext_Respone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chattext_Respone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chattext_Respone.id)
  return id_;
}
inline void chattext_Respone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chattext_Respone.id)
}

// required int32 textid = 2;
inline bool chattext_Respone::has_textid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chattext_Respone::clear_textid() {
  textid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chattext_Respone::textid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chattext_Respone.textid)
  return textid_;
}
inline void chattext_Respone::set_textid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  textid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chattext_Respone.textid)
}

// -------------------------------------------------------------------

// chatemo_Respone

// required int32 id = 1;
inline bool chatemo_Respone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatemo_Respone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatemo_Respone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatemo_Respone.id)
  return id_;
}
inline void chatemo_Respone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chatemo_Respone.id)
}

// required int32 emoid = 2;
inline bool chatemo_Respone::has_emoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatemo_Respone::clear_emoid() {
  emoid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatemo_Respone::emoid() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatemo_Respone.emoid)
  return emoid_;
}
inline void chatemo_Respone::set_emoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  emoid_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chatemo_Respone.emoid)
}

// -------------------------------------------------------------------

// chatstring_Respone

// required int32 id = 1;
inline bool chatstring_Respone::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatstring_Respone::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatstring_Respone::id() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatstring_Respone.id)
  return id_;
}
inline void chatstring_Respone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ccg_pb.chatstring_Respone.id)
}

// required string str = 2;
inline bool chatstring_Respone::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatstring_Respone::clear_str() {
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& chatstring_Respone::str() const {
  // @@protoc_insertion_point(field_get:ccg_pb.chatstring_Respone.str)
  return str_.GetNoArena();
}
inline void chatstring_Respone::set_str(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccg_pb.chatstring_Respone.str)
}
inline void chatstring_Respone::set_str(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccg_pb.chatstring_Respone.str)
}
inline void chatstring_Respone::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccg_pb.chatstring_Respone.str)
}
inline void chatstring_Respone::set_str(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccg_pb.chatstring_Respone.str)
}
inline std::string* chatstring_Respone::mutable_str() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ccg_pb.chatstring_Respone.str)
  return str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatstring_Respone::release_str() {
  // @@protoc_insertion_point(field_release:ccg_pb.chatstring_Respone.str)
  if (!has_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatstring_Respone::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:ccg_pb.chatstring_Respone.str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccg_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
